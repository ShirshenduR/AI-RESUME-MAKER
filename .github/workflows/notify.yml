name: Notify Discord

on:
  workflow_dispatch:
  issues:
    types: [opened, closed]
  pull_request:
    types: [opened, closed]
  watch:
  fork:
  repository_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          EVENT_NAME="${{ github.event_name }}"
          ACTION="${{ github.event.action }}"
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"

          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_URL="${{ github.event.issue.html_url }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          REPO_URL="https://github.com/${REPO}"

          MESSAGE="New GitHub Event in [$REPO]($REPO_URL) by **$ACTOR**"

          if [[ "$EVENT_NAME" == "issues" ]]; then
            if [[ "$ACTION" == "opened" ]]; then
              MESSAGE="üêõ New Issue Created: [**$ISSUE_TITLE**]($ISSUE_URL) by **$ACTOR**"
            elif [[ "$ACTION" == "closed" ]]; then
              MESSAGE="‚úÖ Issue Closed: [**$ISSUE_TITLE**]($ISSUE_URL) by **$ACTOR**"
            fi
          elif [[ "$EVENT_NAME" == "pull_request" ]]; then
            if [[ "$ACTION" == "opened" ]]; then
              MESSAGE="üì¶ New Pull Request: [**$PR_TITLE**]($PR_URL) by **$ACTOR**"
            elif [[ "$ACTION" == "closed" ]]; then
              MESSAGE="üîí Pull Request Closed: [**$PR_TITLE**]($PR_URL) by **$ACTOR**"
            fi
          elif [[ "$EVENT_NAME" == "watch" ]]; then
            MESSAGE="‚≠ê [$REPO]($REPO_URL) starred by **$ACTOR**"
          elif [[ "$EVENT_NAME" == "fork" ]]; then
            MESSAGE="üç¥ [$REPO]($REPO_URL) forked by **$ACTOR**"
          fi

          # Send to Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$MESSAGE\"}" \
               $DISCORD_WEBHOOK
